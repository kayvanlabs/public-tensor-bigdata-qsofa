function [isUsable, isGarbage] = checkIfSignalUsable(noiseDir, signalsInfo, predictionSignalStart, predictionSignalEnd, idVal, encVal, waveVal, waveIdVal)
% DESCRIPTION
% Check if EKG signal is usable based on noise samples stored in noiseDir
%
% REQUIRES
% find_signal_index_from_time()
% files stored in noiseDir have field name 'noisy' storing logical value of
%   whether or not given indices are noisy
%
% INPUT
%   noiseDir: string, location of noise files generated by checkNoise()
%   signalsInfo: table, waveform times
%   predictionSignalStart: datetime, start of prediction signal
%   predictionSignalEnd: datetime, end of prediciton signal
%   idVal: numeric, SepsisID for event
%   encVal: char vector, EncID for event
%   waveVal: char vector, Wave Type for event
%   waveIdVal: char vector, Wave ID for event
%
% OUTPUT
%   isUsable: logical, whether noise is below a given threshold
%   isGarbage: logical, whether the signal is at all usable

    isUsable = false;  % Noise is below a certain threshold
    isGarbage = false;  % Don't even bother
    noiseThresh = 0.5;
    
    if ~strcmp('EKG II', waveVal)
        isUsable = true;
        return  % Don't have noise files for non-EKG data
    end
    
    iIdxStart = find_signal_index_from_time(signalsInfo, idVal, encVal, ...
                                            predictionSignalStart, ...
                                            waveVal, waveIdVal);
    iIdxEnd = find_signal_index_from_time(signalsInfo, idVal, encVal, ...
                                            predictionSignalEnd, ...
                                            waveVal, waveIdVal);
    fNameBase = strjoin({num2str(idVal), char(encVal), ...
                         char(waveVal), char(waveIdVal)}, '_');
    iNoiseFile = fullfile(noiseDir, [fNameBase, '.mat']);    
    try
        iIdxStart = uint64(iIdxStart);
        iIdxEnd = uint64(iIdxEnd);
        iNoiseValues = load(iNoiseFile);
        iNoiseValues = iNoiseValues.noisy;
        iSelectedNoise = iNoiseValues(iIdxStart:(iIdxEnd - 1));
            percentNoisy = sum(iSelectedNoise)/length(iSelectedNoise);
        if percentNoisy < noiseThresh
            isUsable = true;
        else
            isUsable = false;
        end
    catch ME
        if strcmp(ME.identifier, 'MATLAB:load:couldNotReadFile')
            disp(ME.message)
            isGarbage = true;
        elseif strcmp(ME.identifier, 'MATLAB:badsubscript') && all(iNoiseValues == -1)
            isGarbage = true;
        else
            disp(ME.message)
        end
    end
end